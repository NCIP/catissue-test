import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import gov.nih.nci.cagrid.data.client.DataServiceClient;
import gov.nih.nci.cagrid.data.stubs.service.DataService;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;
//import edu.wustl.catissuecore.stubs.CaTissueSuitePortType;

public class CaTissueSuiteClient_Nw extends ServiceSecurityClient 
{
	
	//protected CaTissueSuitePortType portType; 
	protected Object portTypeMutex;
	
	/**
	 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
	 *
	 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
	 * service.
	 *
	 * On construction the class instance will contact the remote service and retrieve it's security
	 * metadata description which it will use to configure the Stub specifically for each method call.
	 * 
	 * @created by Introduce Toolkit version 1.2
	 */
	public CaTissueSuiteClient_Nw(String url) throws MalformedURIException, RemoteException
	{
		this(url,null);	
	}

	public CaTissueSuiteClient_Nw(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException
	{
	   	super(url,proxy);
	   //	initialize();
	}

	/*private void initialize() throws RemoteException {
	    this.portTypeMutex = new Object();
		this.portType = createPortType();
	}*/

	public static void main(String [] args)
	{
		    System.out.println("Running the Grid Service Client");
			try
			{
				/*if(!(args.length < 2))
				{
					System.out.println("Running the Grid Service Client");
					if(args[0].equals("-url"))
					{*/
						//CaTissueSuiteClient client = new CaTissueSuiteClient("https://10.39.196.128:28443/wsrf/services/cagrid/CaTissueSuite");
						//DataService standardClient = new DataServiceClient("https://10.39.196.128:28443/wsrf/services/cagrid/CaTissueSuite");
						
				           // proxy = MyUtil.getProxy();
				            DataServiceClient client = new DataServiceClient("https://10.39.196.128:28443/wsrf/services/cagrid/CaTissueSuite",caGridLogin.globusCredential);
						// 	place client calls here if you want to use this main as a
						// 	test....
						System.out.println("Running the Grid Service Client agrs11111");
						/*for(int i =2;i<args.length;i++)
						{*/
							System.out.println("Running the Grid Service Client args222222");
						  String cqlFileName =".//cqls//Query1.xml";// args[i];
						  System.out.println("Running query: "+cqlFileName);
						  try 
						  {
							  	System.out.println("Running query---: "+cqlFileName);
								CQLQuery query = (CQLQuery) Utils.deserializeDocument(cqlFileName,CQLQuery.class);
								System.out.println("Running query:::::;: "+query.getTypeDesc());
								CQLQueryResults cqlQueryResult = client.query(query);
								System.out.println("Running query:::::;: "+cqlQueryResult);
								printResults(cqlQueryResult);
	                      }
						  catch (Exception e)
						  {
							  e.printStackTrace();
						  }
					    // }	
				   /* }
				    else
				    {
					 usage();
					 System.exit(1);
				    }
				}
				else
				{
					usage();
					System.exit(1);
				}*/
			}
			catch (Exception e)
			{
				e.printStackTrace();
				System.exit(1);
			}
		}
		private static void printResults(CQLQueryResults cqlQueryResult)
		{
			CQLQueryResultsIterator iter = new CQLQueryResultsIterator(cqlQueryResult, true);
			System.out.println(" -------Result Found-----------");
			if (!iter.hasNext())
			{
				System.out.println("No Result Found");
			}
			while (iter.hasNext())
			{
				System.out.println("\n" + iter.next());
			}
			/*java.util.Iterator iter = new CQLQueryResultsIterator(cqlQueryResult,
					CaTissueSuiteClient.class.getResourceAsStream("client-config.wsdd"));
			while (iter.hasNext())
			{
				Participant g = (Participant) iter.next();
				System.out.println("Found a gene:");
				System.out.println(g.getId() + " -- " +  g.getObjectId());
			}*/

		}

	  /*public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
	    synchronized(portTypeMutex){
	      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
	    return portType.getMultipleResourceProperties(params);
	    }
	  }

	  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
	    synchronized(portTypeMutex){
	      configureStubSecurity((Stub)portType,"getResourceProperty");
	    return portType.getResourceProperty(params);
	    }
	  }

	  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
	    synchronized(portTypeMutex){
	      configureStubSecurity((Stub)portType,"queryResourceProperties");
	    return portType.queryResourceProperties(params);
	    }
	  }*/

  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
	    synchronized(portTypeMutex){
//	    	configureStubSecurity((Stub)portType,"query");
//	    gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
//	    gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
//	    cqlQueryContainer.setCQLQuery(cqlQuery);
//	    params.setCqlQuery(cqlQueryContainer);
//	    gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
//	    return boxedResult.getCQLQueryResultCollection();
	    	return null;
	    	
	    }
	  }

	

}
